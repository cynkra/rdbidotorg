---
author: "Kirill MÃ¼ller"
date: "2024-04-02"
title: "The future of DBI, 1/*"
description: "Summarizing the progress of 2022 and 2023"
---



## What is DBI?

The {DBI} package (**d**ata**b**ase **i**nterface) is a layer between R and database management systems (DBMSes).
Users who interact with DBMSes via the DBI package are able to use the same API for all DBMSes.
Implementations of this API are provided by DBMS-specific [backend packages](https://github.com/r-dbi/backends#readme), such as [RPostgres](https://rpostgres.r-dbi.org/), [RMariaDB](https://rmariadb.r-dbi.org/), and [RSQLite](https://rsqlite.r-dbi.org/).
If you are new to DBI, you can find a good entry point in the [introductory tutorial](https://dbi.r-dbi.org/articles/DBI.html).

The interface is designed to be simple and consistent, making it easy to switch between different DBMSes.
Packages built on top of DBI, such as [dbplyr](https://dbplyr.tidyverse.org/) or [arkdb](https://docs.ropensci.org/arkdb/), provide additional functionality and convenience.
New backends can be implemented by following the [DBI specification](https://dbi.r-dbi.org/articles/spec.html), which comes with a comprehensive test suite in the [DBItest](https://dbitest.r-dbi.org/) package.
The [RKazam](https://rkazam.r-dbi.org/) template makes it easy to get started.
(Spoiler alert: We know because a new backend has been added recently.
Read on!)

This blog post is split into multiple parts.
In this first part, we will summarize recent developments in {DBI} and related packages.
The second part reviews the time it takes to respond to issues and pull requests.
In the third part, we will do a deeper dive into the new adbi and adbcdrivermanager packages, which use the Arrow data exchange format and offer a more sustainable approach to database connectivity.

Similar articles are available from previous years, reporting on earlier states of the {DBI} ecosystem:

- [4/4: December 2021](https://www.r-dbi.org/blog/dbi-3-3/)
- [3/4: January 2021](https://www.r-dbi.org/blog/dbi-3-3/)
- [2/4: December 2019](https://www.r-dbi.org/blog/dbi-3-2/)
- [1/4: December 2018](https://www.r-dbi.org/blog/dbi-3-1/)

## Overall

### Improve CI/CD infrastructure

Packages run their own checks and the checks for related components.
For example, DBI now runs DBItest with RSQLite, and DBItest runs checks for all backends, including odbc. 
This ensures interoperability between CRAN and development versions of the packages and helps to catch issues early.

Several components simplify the day-to-day work:

- [Aviator](https://www.aviator.co/) helps ensuring always "green" builds on the main branch.

    It is a "click-and-forget" solution that automatically merges pull requests when all checks pass.
    I'm using this for all my packages now, and it has saved me a lot of time.
    I also tried the native GitHub merge queue, but it seems to require protecting the main branch, which conflicts with ðŸ‘‡

- [fledge](https://fledge.cynkra.com/) helps automating the release process.

    This package generates a changelog from PR titles.
    In my setup, it is run daily and automatically updates `NEWS.md`.
    Before release to CRAN, the changelog is manually converted to release notes.
    Once a package is on CRAN, a GitHub release is created with these release notes.

- All packages use a similar but not identical setup for CI/CD.

    For example, the DBMS installed differs between backends.
    To manage this and also allow continuous improvement of the CI/CD process, I'm using [bidirectional synchronization](https://github.com/krlmlr/actions-sync) to and from a central repository.

### Improve testing infrastructure

Testing DBI and associated packages often requires a database server.
While it is easy enough to install MariaDB and PostgreSQL to run locally, running Oracle and SQL Server on macOS requires Docker.
If *some* databases require Docker, why not run *all* databases in Docker?
This gives the additional advantage of being able to install different versions of the same database server side by side, and to easily recreate a fresh test environment.

The [docker](https://github.com/r-dbi/docker) repository aims at providing a consistent and easy-to-use setup for all databases and all packages.
It uses Docker Compose to turn otherwise complex command line invocations into a single `docker-compose` command.
The goals are:

- Have a single robust command to create a server and a test connection, testable with CI/CD.

- Offer an easy way to run tests or scripts against a particular database server, using a development version of a backend package.

- Support testing all useful combinations of DBI backend and database server.

- Make it easy to add new database versions, new databases, and new backends.

The repository is still in its early stages, but it already supports MariaDB, MySQL, PostgreSQL, SQLite, SQL Server, and Oracle.
Feedback and contributions are welcome.

### Documentation improvements

Various documentation improvements have been made:

- DBI specification is now version-controlled as Markdown files.
  Previously has been assembled at package build time from various sources.

- The command execution and data retrieval flow has been clarified in the documentation.
  This has been a common source of confusion for new users.

- All packages now use the new pkgdown documentation template at <https://github.com/r-dbi/dbitemplate>, and the website at <https://r-dbi.org> is now built using Quarto.
  Thanks to MaÃ«lle Salmon!

### Move to cpp11

The RSQLite, RPostgres, and RMariaDB packages are now using the [cpp11](https://cpp11.r-lib.org/) package for the glue between R and C++.
This header-only package provides a modern C++11 interface to R, the header files can be vendored into the backend packages if needed.
Other highlights include the use "UTF-8 everywhere" paradigm, improved safety of C API calls, and a faster implementation of protection.

### Avoid tidying of duplicate column names

The RSQLite, RPostgres, and RMariaDB packages no longer change duplicate column names.
The behavior in the presence of duplicate column names was not specified in the DBI specification, but imposing a tidying step seems out of scope for a database interface.
It is now up to the user to handle duplicate column names, for example by using `janitor::clean_names()`.

## DBI: minor update to 1.2.2

### Integration with Arrow

DBI backens can now optionally support Arrow arrays and streams as the primary data exchange format.
This is accessed through the new generics `dbSendQueryArrow()`, `dbFetchArrow()`, `dbFetchArrowChunk()`, `dbGetQueryArrow()`, `dbReadTableArrow()`, `dbWriteTableArrow()`, `dbCreateTableArrow()`, `dbAppendTableArrow()`, and `dbBindArrow()`.
See the new [vignette on Arrow support in DBI](https://dbi.r-dbi.org/articles/DBI-arrow.html) for details.

A default implementation is provided in the DBI package, this means that the new interface can be used with any DBI backend without changes to the backend package.
Performance and interoperability gains can be achieved by directly implementing the Arrow interface in the backend package, as the new adbi package does.
More on that below, thanks to [Voltron Data](https://voltrondata.com/) for supporting this effort!


### Object identifiers

The `Id()` class has been changed to unnamed components, as the explicit naming of the components ("database", "schema", "table") was not used in practice.
This also affects the `dbQuoteIdentifier()`, `dbUnquoteIdentifier()`, and `dbListObjects()` generics, which now accept and return unnamed `Id()` objects.


## DBItest: minor update to 1.8.1

### Code generation

[Why good developers write bad unit tests](https://mtlynch.io/good-developers-bad-tests/)?
I consider myself a good developer, and the DBItest package is a prime example of tests with room for improvement.
In a nutshell, production code should avoid repetition and hard-coded constant, while testing code should be as explicit and as easy to understand and execute as possible.

The DBItest package is home to both the specification of the DBI package and a test suite for DBI backends.
As such, good software engineering practices are actually helpful here and have helped cover many corner cases in the DBI backends.
Running the tests in DBItest is easy, but in the case of a failure, the error messages are not always helpful.
Backend developers typically have to read the test code to understand what went wrong.
And if the actual test code hides between layers of abstraction, this can be a daunting task.

Code generation has proved to be a powerful tool to peel off abstraction layers, for instance in the [duckplyr](https://duckdblabs.github.io/duckplyr/) project.
In R, code is data, and the language and the associated packages are very well suited for this task.
The long-term goal is to turn DBItest into a *code generator* rather than a *test executor*: the test code will be generated from a specification directly into the backend package and executed there.
In the case of a failure, the error message will point to the generated code and to the relevant part of the specification.
Failing tests can be executed trivially, very much like failures in regular tests.
The expected behavior becomes apparent from the generated code, leading to a better understanding of the failure and a more efficient debugging process.

A first step has been taken in this direction, the tests for the command execution and data retrieval flows via `dbBind()` have been refactored to generate inline code in the DBItest package.
The process towards full code generation requires similar steps in a few other places to avoid hard-to-understand generated code, which would be even worse than the current situation.

### Decoupling from backends

As DBItest continues to evolve, and more backends are using it, the ability to add or update checks without affecting all downstream packages becomes crucial.
Each new or modified test will require the backend package to opt in by updating the DBItest version in their `tweaks()` call.
Once the code generation is in place, this will become less of an issue, but for now this helps with the ongoing development.

### Other improvements

The new Arrow generics are now tested in DBItest, and the tests have been integrated into the CI/CD pipeline.

A new tweak `allow_na_rows_affected` has been added to support `NA` values returned from `dbGetRowsAffected()` and passed as the `n` argument to `dbFetch()`.


## RSQLite: minor update to 2.3.6, continuous updates following upstream SQLite releases

The automatic update of the bundled SQLite library has enabled continuous and timely updates of the RSQLite package on CRAN.
The latest version of SQLite is 3.45.2, and the RSQLite package is now bundling it.
For this reason, the known authors of SQLite have been added to the `DESCRIPTION` file.
This process allows quicker updates of SQLite than if installing from [OS package repositories](https://repology.org/project/sqlite/versions), and precise control of the underlying SQLite version used in a project.

Other minor changes include support for the icpc compiler, and a new `sqliteIsTransacting()` function that returns if a transaction is active on the current connection.


## RPostgres: minor update to 1.4.6

Maintenance updates.

## RMariaDB: minor update to 1.3.1

Align with updates to the MySQL C API, e.g., avoiding the deprecated `mysql_ssl_set()` function.

Support `TIME` columns with subsecond precision.

Use string as default for JSON (#296) and all unknown column types.

Connections now inherit from `"MySQLConnection"` if a MySQL server is detected (server version \< 10.0 and server description does not contain `"MariaDB"`). The new `mysql` argument to `dbConnect()` allows overriding the autodetection.

Support `dbSendStatement(immediate = TRUE)` and `dbExecute(immediate = TRUE)`, needs `CLIENT_MULTI_STATEMENTS`.

## adbi: new release in collaboration with Voltron Data, bridging DBI and adbc (Arrow Database Connectivity)

The new adbi package bridges ADBC drivers and DBI.
Examples include:

- adbcsqlite, on CRAN
- adbcpostgresql, on CRAN
- [adbcsnowflake](https://github.com/apache/arrow-adbc/tree/main/r/adbcsnowflake) for [Snowflake](https://www.snowflake.com/)
- [adbcflightsql](https://github.com/apache/arrow-adbc/tree/main/r/adbcflightsql) for [FlightSQL](https://arrow.apache.org/docs/format/FlightSql.html)

[ADBC](https://arrow.apache.org/adbc/) is 

> an API standard for database access libraries that uses Arrow for result sets and query parameters.

The adbi package allows existing code that uses DBI to seamlessly interact with the new ADBC drivers, but this will not improve performance.
To facilitate the switch to using Arrow as a data interchange format, adbi supports access via data frames and Arrow side by side, on the same connection object, using the new generics defined by DBI.
For example, with `dbGetQueryArrow()`, the result set is passed to R as an Arrow stream, bypassing the expensive conversion to data frames.
The subsequent section contains a more detailed example.

Development of the adbi package has been made easy with the RKazam package, which is a template for creating DBI backends, and the DBItest package, which provides a battery of tests that all "pass" with the package generated from the template and help guide the development process.
Thanks to Nicolas Bennett for implementation and the wonderful collaboration, and to Voltron Data for supporting this effort.

## Acknowledgments

Thanks to the numerous contributors to the packages in the "Maintaining DBI" project in 2022 and 2023:

- DBI: [&#x0040;apalacio9502](https://github.com/apalacio9502), [&#x0040;asadow](https://github.com/asadow), [&#x0040;bcorwin](https://github.com/bcorwin), [&#x0040;capitantyler](https://github.com/capitantyler), [&#x0040;chrisdane](https://github.com/chrisdane), [&#x0040;eauleaf](https://github.com/eauleaf), [&#x0040;eitsupi](https://github.com/eitsupi), [&#x0040;eriksquires](https://github.com/eriksquires), [&#x0040;fnavarro94](https://github.com/fnavarro94), [&#x0040;GitHunter0](https://github.com/GitHunter0), [&#x0040;hadley](https://github.com/hadley), [&#x0040;hannes101](https://github.com/hannes101), [&#x0040;Jay123ub](https://github.com/Jay123ub), [&#x0040;jd4ds](https://github.com/jd4ds), [&#x0040;kelseyroberts](https://github.com/kelseyroberts), [&#x0040;latot](https://github.com/latot), [&#x0040;maelle](https://github.com/maelle), [&#x0040;matthiasgomolka](https://github.com/matthiasgomolka), [&#x0040;mgirlich](https://github.com/mgirlich), [&#x0040;mmuurr](https://github.com/mmuurr), [&#x0040;nbenn](https://github.com/nbenn), [&#x0040;philibe](https://github.com/philibe), [&#x0040;pnacht](https://github.com/pnacht), [&#x0040;r2evans](https://github.com/r2evans), [&#x0040;renkun-ken](https://github.com/renkun-ken), [&#x0040;salim-b](https://github.com/salim-b), [&#x0040;scottfrechette](https://github.com/scottfrechette), and [&#x0040;tzakharko](https://github.com/tzakharko).

- DBItest: [&#x0040;barracuda156](https://github.com/barracuda156), [&#x0040;detule](https://github.com/detule), [&#x0040;dpprdan](https://github.com/dpprdan), [&#x0040;hadley](https://github.com/hadley), [&#x0040;maelle](https://github.com/maelle), [&#x0040;MichaelChirico](https://github.com/MichaelChirico), [&#x0040;nbenn](https://github.com/nbenn), [&#x0040;psychelzh](https://github.com/psychelzh), and [&#x0040;TSchiefer](https://github.com/TSchiefer).

- RSQLite: [&#x0040;Antonov548](https://github.com/Antonov548), [&#x0040;arnaud-feldmann](https://github.com/arnaud-feldmann), [&#x0040;bpvgoncalves](https://github.com/bpvgoncalves), [&#x0040;chodarq](https://github.com/chodarq), [&#x0040;Daniel-Zhou-93](https://github.com/Daniel-Zhou-93), [&#x0040;DavorJ](https://github.com/DavorJ), [&#x0040;eriksquires](https://github.com/eriksquires), [&#x0040;gaospecial](https://github.com/gaospecial), [&#x0040;gavril0](https://github.com/gavril0), [&#x0040;github-actions[bot]](https://github.com/github-actions[bot]), [&#x0040;hadley](https://github.com/hadley), [&#x0040;IdoBar](https://github.com/IdoBar), [&#x0040;JeremyPasco](https://github.com/JeremyPasco), [&#x0040;joethorley](https://github.com/joethorley), [&#x0040;kjellpk](https://github.com/kjellpk), [&#x0040;kmishra9](https://github.com/kmishra9), [&#x0040;krlmlr](https://github.com/krlmlr), [&#x0040;lolow](https://github.com/lolow), [&#x0040;maelle](https://github.com/maelle), [&#x0040;MichaelChirico](https://github.com/MichaelChirico), [&#x0040;nathaneastwood](https://github.com/nathaneastwood), [&#x0040;nunotexbsd](https://github.com/nunotexbsd), [&#x0040;RoganGrant](https://github.com/RoganGrant), [&#x0040;SarenT](https://github.com/SarenT), [&#x0040;stephenashton-dhsc](https://github.com/stephenashton-dhsc), [&#x0040;wibeasley](https://github.com/wibeasley), and [&#x0040;xmart](https://github.com/xmart).

- RPostgres: [&#x0040;abalter](https://github.com/abalter), [&#x0040;ablack3](https://github.com/ablack3), [&#x0040;agilly](https://github.com/agilly), [&#x0040;aliarsalankazmi](https://github.com/aliarsalankazmi), [&#x0040;ankane](https://github.com/ankane), [&#x0040;Antonov548](https://github.com/Antonov548), [&#x0040;bhogan-mitre](https://github.com/bhogan-mitre), [&#x0040;castagninojose](https://github.com/castagninojose), [&#x0040;DavisVaughan](https://github.com/DavisVaughan), [&#x0040;dmkaplan2000](https://github.com/dmkaplan2000), [&#x0040;dpprdan](https://github.com/dpprdan), [&#x0040;geneorama](https://github.com/geneorama), [&#x0040;gui-salome](https://github.com/gui-salome), [&#x0040;ilarischeinin](https://github.com/ilarischeinin), [&#x0040;jeroen](https://github.com/jeroen), [&#x0040;karawoo](https://github.com/karawoo), [&#x0040;kevinpalm](https://github.com/kevinpalm), [&#x0040;kmishra9](https://github.com/kmishra9), [&#x0040;maelle](https://github.com/maelle), [&#x0040;majazaloznik](https://github.com/majazaloznik), [&#x0040;meztez](https://github.com/meztez), [&#x0040;mgirlich](https://github.com/mgirlich), [&#x0040;mmuurr](https://github.com/mmuurr), [&#x0040;nbenn](https://github.com/nbenn), [&#x0040;pachadotdev](https://github.com/pachadotdev), [&#x0040;pedrobtz](https://github.com/pedrobtz), [&#x0040;samterfa](https://github.com/samterfa), [&#x0040;sbamin](https://github.com/sbamin), [&#x0040;stefan-m-lenz](https://github.com/stefan-m-lenz), and [&#x0040;veer0318](https://github.com/veer0318).

- RMariaDB: [&#x0040;Antonov548](https://github.com/Antonov548), [&#x0040;arecibo](https://github.com/arecibo), [&#x0040;bergernetch](https://github.com/bergernetch), [&#x0040;BillWeld](https://github.com/BillWeld), [&#x0040;cboettig](https://github.com/cboettig), [&#x0040;d-hansen](https://github.com/d-hansen), [&#x0040;EllyJung](https://github.com/EllyJung), [&#x0040;frabau1](https://github.com/frabau1), [&#x0040;ghost](https://github.com/ghost), [&#x0040;GitHunter0](https://github.com/GitHunter0), [&#x0040;GraphZal](https://github.com/GraphZal), [&#x0040;GundryLab](https://github.com/GundryLab), [&#x0040;hpages](https://github.com/hpages), [&#x0040;jay-sf](https://github.com/jay-sf), [&#x0040;jd4ds](https://github.com/jd4ds), [&#x0040;jeroen](https://github.com/jeroen), [&#x0040;KevinYie](https://github.com/KevinYie), [&#x0040;kwakuduahc1](https://github.com/kwakuduahc1), [&#x0040;lbui30](https://github.com/lbui30), [&#x0040;LeeMendelowitz](https://github.com/LeeMendelowitz), [&#x0040;LukeBla](https://github.com/LukeBla), [&#x0040;maelle](https://github.com/maelle), [&#x0040;mbarneytu](https://github.com/mbarneytu), [&#x0040;mgirlich](https://github.com/mgirlich), [&#x0040;MySocialPulse](https://github.com/MySocialPulse), [&#x0040;NoProblemJack](https://github.com/NoProblemJack), [&#x0040;pekkarr](https://github.com/pekkarr), [&#x0040;psychelzh](https://github.com/psychelzh), [&#x0040;pythiantech](https://github.com/pythiantech), [&#x0040;renkun-ken](https://github.com/renkun-ken), [&#x0040;rorynolan](https://github.com/rorynolan), [&#x0040;ryan-hdez](https://github.com/ryan-hdez), [&#x0040;SwissMontainsBear](https://github.com/SwissMontainsBear), [&#x0040;uhkeller](https://github.com/uhkeller), and [&#x0040;vanhry](https://github.com/vanhry).
