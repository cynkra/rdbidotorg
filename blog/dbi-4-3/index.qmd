---
author: "Kirill MÃ¼ller"
date: "2024-04-14"
title: "The future of DBI, 3/*"
description: "Summarizing the progress of 2022 and 2023"
---

This is a continuation of the [first](https://r-dbi.org/blog/dbi-4-1/) and [second blog post](https://r-dbi.org/blog/dbi-4-2/) in this series.

## A new database standard?

The DBI package offers consistent database access in R.
Different database systems, such as PostgreSQL, MySQL, SQLite, and others, can be accessed through a common interface.
To access a particular database, a driver package is required, such as RMariaDB, RPostgres, or RSQLite.
These driver packages implement the DBI interface and bind to the database system's native client library, such as Connector/C for MariaDB or libpq for PostgreSQL.
A common interface is essential for users who want to switch between database systems or who want to use different database systems in the same project.
Similar efforts exist in other ecosystems, such as Python's DB-API 2.0.
When considering the bigger picture, providing access to all databases for all ecosystems looks like this:

![Data flow from libpq to consumers](pairwise.png){fig-alt="Space divided into two areas, R data frames at the left, Arrow at the right. Two concurrent data flows from libpq to DBI are shown: one via RPostgres through R data frames, one via adbcpostgresql and adbi through Arrow. The two flows merge at the DBI layer. From DBI, consumers can use dbGetQuery() to get data frames, or dbGetQueryArrow() to get Arrow streams."}




- New development ADBC with adbi

- Advantages: graphic
    - PostgreSQL, SQL Server, MariaDB, Oracle, SQLite, Clickhouse on the left, each connected to R, Python, Julia, Excel, Tableau on the right

- Why better than odbc?

    - New implementation, learning from the past
    
    - Portable data format Arrow
    
        - covering most of what we need on the database
        
        - extensible
        
        - interoperable
        
        - fast
        
        - Arrow on the wire
        
    - Direct integration with target systems via vendoring: cover database-specific functionality that is not part of the standard

- DBI use cases and needs. I need to:

    - connect to our database

    - read a table from our database
    
    - write my data to our database

    - run this query on our database
    
    - access data from a database from a Shiny app
    
    - create a new table in our database
    
    - write complex queries that involve multiple tables
    
    - review and manage the tables in our database


TODO: Nicolas + Kirill one-on-one

TODO: Bump DBItest

TODO: CRAN release

TODO: Issue and PR stats

FIXME: dm

FIXME: adbi

TODO: Async

FIXME: Intro, summary


# adbi: new release in collaboration with Voltron Data, bridging DBI and adbc (Arrow Database Connectivity)

The new adbi package bridges ADBC drivers and DBI.
Examples include:

- adbcsqlite, on CRAN
- adbcpostgresql, on CRAN
- [adbcsnowflake](https://github.com/apache/arrow-adbc/tree/main/r/adbcsnowflake) for [Snowflake](https://www.snowflake.com/)
- [adbcflightsql](https://github.com/apache/arrow-adbc/tree/main/r/adbcflightsql) for [FlightSQL](https://arrow.apache.org/docs/format/FlightSql.html)

[ADBC](https://arrow.apache.org/adbc/) is 

> an API standard for database access libraries that uses Arrow for result sets and query parameters.

The adbi package allows existing code that uses DBI to seamlessly interact with the new ADBC drivers, but this will not improve performance.
To facilitate the switch to using Arrow as a data interchange format, adbi supports access via data frames and Arrow side by side, on the same connection object, using the new generics defined by DBI.
For example, with `dbGetQueryArrow()`, the result set is passed to R as an Arrow stream, bypassing the expensive conversion to data frames.
The subsequent section contains a more detailed example.

Development of the adbi package has been made easy with the RKazam package, which is a template for creating DBI backends, and the DBItest package, which provides a battery of tests that all "pass" with the package generated from the template and help guide the development process.
Thanks to Nicolas Bennett for implementation and the wonderful collaboration, and to Voltron Data for supporting this effort.


## dbi3?

The following example illustrates the various connectivity options with a PostgreSQL database.
In all scenarios, the libpq library is used to communicate with the database server.
The RPostgres package links to libpq and uses this API directly to retrieve and ingest data from R via the DBI interface.
The adbcpostgresql package also links to libpq but exposes ADBC, which is brought to R with the adbcdrivermanager package.
On top of that, the adbi package interacts with arbitrary ADBC drivers (including adbcpostgresql) and exposes the functionality through DBI.
The R user has the choice to access the data via data frames or via Arrow.
Only when using adbi and the new `dbGetQueryArrow()`, the implementation will never convert the data to R data frames.
In all other cases, a conversion to R data frames will occur.

![Data flow from libpq to consumers](adbi.png){fig-alt="Space divided into two areas, R data frames at the left, Arrow at the right. Two concurrent data flows from libpq to DBI are shown: one via RPostgres through R data frames, one via adbcpostgresql and adbi through Arrow. The two flows merge at the DBI layer. From DBI, consumers can use dbGetQuery() to get data frames, or dbGetQueryArrow() to get Arrow streams."}

While the Arrow path seems to involve more components, it is the most efficient way to interact with the database because the data is threaded through from adbcpostgresql to R without any conversion or even copying.
The only conversion occurs in adbcpostgresql, when the data returned by libpq is converted to Arrow format.
With FlightSQL, the data will be passed in the Arrow format end to end, this requires support in the database *server*.
This is a promising development.
By using adbi or adbcdrivermanager, R users can seamlessly transition to FlightSQL when it becomes available in their database.

- n host systems x m databases

- What boxes are ticked by using adbcdrivermanager?

### Review async

