---
author: "Kirill MÃ¼ller"
date: "2024-04-14"
title: "The future of DBI, 3/*"
description: "Summarizing the progress of 2022 and 2023"
---

This is a continuation of the [first](https://r-dbi.org/blog/dbi-4-1/) and [second blog post](https://r-dbi.org/blog/dbi-4-2/) in this series.

## A new database standard?

The DBI package offers consistent database access in R.
Different database systems, such as PostgreSQL, MySQL, SQLite, and others, can be accessed through a common interface.
To access a particular database, a driver package is required, such as RMariaDB, RPostgres, or RSQLite.
These driver packages implement the DBI interface and bind to the database system's native client library, such as Connector/C for MariaDB or libpq for PostgreSQL.
A common interface is essential for users who want to switch between database systems or who want to use different database systems in the same project.
Similar efforts exist in other ecosystems, such as Python's DB-API 2.0.
When considering the bigger picture, providing access to all databases for all ecosystems looks like this:

![Direct access to all databases from all ecosystems](pairwise.png){fig-alt="Two boxes, Databases at the top, ecosystems at the bottom. PostgreSQL, SQL Server, MariaDB, Oracle, Clickhouse in the top box, R, Python, Julia, Excel, Tableau, and others in the bottom box. One arrow from each database to each ecosystem."}

Each line represents a software package to develop and maintain, following changes in the database system and the target ecosystem.
And, of course, the list of databases and ecosystems is not exhaustive.
With every new system, many more connections need to be established.
A daunting task!

This is where the ADBC project comes in.
The [Arrow Database Connectivity](https://arrow.apache.org/adbc/) project aims to provide a common interface for database access across ecosystems, using the Arrow data format as the common data exchange format.
Now, the big picture is greatly simplified:

![Access to all databases from all ecosystems through ADBC](star.png){fig-alt="Two boxes, Databases at the top, ecosystems at the bottom. PostgreSQL, SQL Server, MariaDB, Oracle, Clickhouse in the top box, R, Python, Julia, Excel, Tableau, and others in the bottom box. ADBC in the middle, with one arrow from each database to ADBC and from ADBC to each ecosystem."}

This isn't an entirely new idea.
ODBC (Open Database Connectivity) has been around for a long time, with a very similar goal.
The new implementation can avoid some of the legacy issues of ODBC, it can also build on the lessons learned from ODBC. The standardization on the Arrow data format is a significant advantage:

- Most data types typically supported by databases are supported directly, and the format is extensible.

- The same data format can be used across ecosystems, avoiding conversions and copies.

- Arrow is designed for high performance, with zero-copy data sharing between systems.

- With FlightSQL, the same data format can be used for data exchange between client and server, avoiding serialization and deserialization.

- Like with ODBC, an ADBC driver is a shared library that can be loaded into any ecosystem.
    In addition, ADBC drivers can be tightly coupled with the target system, allowing to cover database-specific functionality that is not part of ADBC.
    An example is adbcpostgresql, which provides access to PostgreSQL-specific features: it exists as a [standalone C library](https://github.com/apache/arrow-adbc/tree/main/c/driver/postgresql), as an [R package](https://github.com/apache/arrow-adbc/tree/main/r/adbcpostgresql) (essentially vendoring the C library with some very lightweight boilerplate), as a [Python package](https://github.com/apache/arrow-adbc/tree/main/python/adbc_driver_postgresql), and for many other target ecosystems.
    This greatly simplifies the installation and configuration of the driver.

For R, the main entry point is the [adbcdrivermanager package](https://arrow.apache.org/adbc/current/r/adbcdrivermanager/).
It provides the glue between R and the ADBC drivers.
Because all ADBC drivers use the same Arrow data format, the adbcdrivermanager package can focus on the common functionality, such as connection management, query execution, and data retrieval.
The [adbcpostgresql package](https://arrow.apache.org/adbc/current/r/adbcpostgresql/) imports the adbcdrivermanager package and provides the PostgreSQL-specific functionality.

## The adbi package

Because ADBC is a new project, it doesn't yet cover all databases and ecosystems.
To simplify the transition, the adbi package bridges ADBC drivers and DBI, enabling existing code that uses DBI to seamlessly interact with the new ADBC drivers.
Thanks to Voltron Data for the collaboration on this project and for the support in developing the adbi package and the DBI extension.

The adbi package is available on CRAN and provides the following features:

- Access to ADBC drivers through the DBI interface.

- Data retrieval as data frames or Arrow, side by side, on the same connection object, using the new generics defined by DBI.

Using ADBC through adbi will not improve performance, but it will facilitate the switch to using Arrow as a data interchange format.
Similarly, the DBI package provides a default implementation for the new Arrow generics, which is not optimized for performance but can be used to directly convert data provided by DBI backends to Arrow.
However, by using adbi with the new DBI generics such as `dbGetQueryArrow()` or `dbFetchArrow()`, the data is never converted to a data frame, and the Arrow data format is used directly.
See [the relevant section in the first blog post](https://r-dbi.org/blog/dbi-4-1/#integration-with-arrow) for an example using PostgreSQL.

## Reimagining DBI

The [dbi3 repository](https://github.com/r-dbi/dbi3/) contains little but an issue tracker and a few scripts.
The issues were moved from the various repositories in the [r-dbi organization](https://github.com/r-dbi) to be picked up for a reimagining of the database interface.
With the new ADBC standard and the adbi package, it seemed worthwhile to revisit the responsibilities of a database interface in R.

The [README](https://github.com/r-dbi/dbi3?tab=readme-ov-file#issues-and-solutions) now contains a categorization of the issues.
It turns out that a good third of the issues can now be easily solved with ADBC and the adbcdrivermanager package, or a solution on top of ADBC/adbcdrivermanager is the best way to go.
A few issues seem to belong in other packages such as dbplyr or dm.
The remaining issues, again about a third, are not actionable at this time.
The resolution depends on whether the ADBC project will be successful and whether the R community will adopt it.
To clear this path, DBI will keep and improve compatibility with ADBC and adbi.

To bring adbcdrivermanager on par with DBI, a few issues need to be addressed:

- Test suite: should a test package similarly to DBItest be created?

- Interoperability with existing DBI backends: can a generic ADBC driver be created so that any existing DBI backend can be used with ADBC? A prime candidate would be the odbc package, this would add support for all ODBC drivers to ADBC via R, until a native ADBC driver is available.

- SQL generation: can dbplyr be connected to ADBC, either directly or via adbi?

- Usability: the adbcdrivermanager package looks more like an "implementer's interface", a convenience "user's interface" wrapper or extension might make it easier to use.

- Documentation: the ADBC standard is well-documented, but the documentation specific to the R ecosystem could be expanded.

## Draft: use cases

What is core functionality, what can be provided by addon packages, and what use cases should be left for the end user to implement?

As an R user, I need to:

- connect to our database

- read a table from our database

- run this query on our database

- access a database from a Shiny app

- write my data to our database

I might also need to:

- create a new table in our database

- write complex queries that involve multiple tables

- review and manage the tables in our database


<!--
TODO: Nicolas + Kirill one-on-one

TODO: Bump DBItest

TODO: CRAN release

FIXME: dm

FIXME: adbi

TODO: Async

FIXME: Intro, summary
-->
